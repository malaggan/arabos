# Copyright (C) 2007  Mohammad Nabil 
# mohammad (dot) nabil (dot) h (at) gmail (dot) com
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

.PHONY: default clean_files

# $(MODULE_NAME) must be equal to the name of the module directory
# anyway $(MODULE_NAME) was just put to make 'make' shows 
# ``$(MODULE_NAME) is up to date " instead of ``'build' is up to date"

default: all

RM := (ls FILE && rm FILE) > /dev/null 2>&1 || true

#########################

define DEPEND
$(SHELL) -ec '$(CC) -M $(CFLAGS) $< \
| sed '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
[ -s $@ ] || rm -f $@'
endef

define DEPENDCPP
$(SHELL) -ec '$(CPP) -M $(CPPFLAGS) $< \
| sed '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
[ -s $@ ] || rm -f $@'
endef

SRCS := $(wildcard *.c) $(wildcard *.S) $(wildcard *.asm) $(wildcard *.cpp)

list0 := $(SRCS:.cpp=.f)
list1 := $(list0:.asm=.f)
list2 := $(list1:.S=.f)
list3 := $(list2:.c=.f)
OBJS := $(list3:%.f=../obj/%.o)
.PHONY: del_errs
del_errs:
	@$(subst FILE,error_log,$(RM))
	@echo > error_log
	@echo DIR $(DIR) errors : >> error_log
	@echo =================== >>error_log
build_$(MODULE_NAME): del_errs $(OBJS)
	@bash -ce "if (( `wc -l error_log | awk '{print $$1}'` <= 3 )); then rm error_log; fi;"

#########################
# implicit ruels

../obj/%.o: %.asm
	@echo + AS $(DIR)/$<
	@$(AS) $< -o ../obj/$@ $(ASFLAGS) 2>>error_log

../obj/%.o: %.cpp
	@echo + CPP $(DIR)/$<
	@$(CPP) $< $(CPPFLAGS) -fdebug-prefix-map==$(DIR)/ -o ../obj/$@ 2>>error_log

../obj/%.o: %.c
	@echo + CC $(DIR)/$<
	@$(CC) $< $(CFLAGS) -fdebug-prefix-map==$(DIR)/ -o ../obj/$@ 2>>error_log
#	-@$(LINT) $< -I$(INCLUDE)

../obj/%.o: %.S
	@echo + CC $(DIR)/$<
	@$(CC) $< $(CFLAGS) -fdebug-prefix-map==$(DIR)/ -o ../obj/$@ 2>>error_log

# dependency files
%.d: %.cpp
	@$(DEPENDCPP)

%.d: %.c
	@$(DEPEND)

%.d: %.S
	@$(DEPEND)

%.d: %.asm
	@echo "$< $@ :" > $*.d

#########################

clean_files:    
	@$(subst FILE,*.d,$(RM))
	@$(subst FILE,error_log,$(RM))

#########################

-include $(list3:.f=.d)
